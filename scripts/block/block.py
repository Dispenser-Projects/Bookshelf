import requests
import math
import sys
import os

def run(mc_version, world_path):

    path = os.path.join(world_path,"datapacks/Bookshelf/data/bs.block/")

    data_source = f"https://raw.githubusercontent.com/Ersatz77/mcdata/{mc_version}/processed/reports/blocks/simplified/data.json"

    response = requests.get(data_source)

    print("⚙️ Generating types_table.mcfunction")

    blocks_storage_template = r"""data modify storage bs:const block set value [%blocks%]"""
    block_template = r"""{id:%id%,group:%group%,type:"%type%",item:"%item%"}"""

    groups = [{"default":{},"properties":{}}]
    blocks = []
    block_list = []
    id = 1
    for block, data in response.json().items():
        block_list.append((id,block))

        if data in groups:
            index = groups.index(data)
        else:
            groups.append(data)
            index = len(groups) - 1

        blocks.append(
            block_template
                .replace("%id%", str(id))
                .replace("%group%", str(index))
                .replace("%type%", block)
                .replace("%item%", block))

        id += 1

    res = blocks_storage_template.replace("%blocks%", ",".join(blocks))

    with open(os.path.join(path,"functions/load/types_table.mcfunction"), "w") as file:
        file.write("# This file was generated by an external script.\n")
        file.write(res)

    print("✅ Done!")
    print("⚙️ Generating states_table.mcfunction")

    states_table_template = r"""data modify storage bs:const block[{group:%group%}].iterable_properties set value [%states%]"""

    commands = []
    for data in groups[1:]:

        states = []
        for property, values in data["properties"].items():

            while values[0] != data["default"][property]:
                values.append(values.pop(0))

            property_template = """{name:"%property%",options:[%options%]}"""

            option_template = """{index:%index%,value:"%value%",state:"%property%=%value%,",property:{%property%:"%value%"}}"""

            options = ",".join([option_template
                                .replace("%index%", str(index))
                                .replace("%value%", value)
                                .replace("%property%", property)
                            for index, value in enumerate(values)])

            states.append(
                property_template
                    .replace("%property%", property)
                    .replace("%options%", options))

        states = ",".join(states)

        commands.append(
            states_table_template
                .replace("%group%", str(groups.index(data)))
                .replace("%states%", states))

    with open(os.path.join(path,"functions/load/states_table.mcfunction"), "w") as file:
        file.write("# This file was generated by an external script.\n")
        file.write("\n".join(commands))

    print("✅ Done!")
    print("⚙️ Generating block tags")

    base = math.floor(math.log2(len(block_list)))

    for i in range(base + 1):

        types = []

        for j in range(len(block_list)):
            if (j >> i) & 1:
                types.append(f'"{block_list[j][1]}"')

        type_list = ",".join(types)

        with open(os.path.join(path,f"tags/blocks/type/group_{2**i}.json"), "w") as file:
            file.write(r"""{"values":[%type_list%]}""".replace("%type_list%", type_list))

    print("✅ Done!")

if __name__ == "__main__":
    try:
        run(sys.argv[1], sys.argv[2])
    except IndexError as e:
        raise IndexError("Usage: python block.py <minecraft_version> <world_path>")
